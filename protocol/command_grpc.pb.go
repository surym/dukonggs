// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: protocol/command.proto

package protocol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DukongGSClient is the client API for DukongGS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DukongGSClient interface {
	// Sends a greeting
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (DukongGS_LoginClient, error)
	StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameReply, error)
	StopGame(ctx context.Context, in *StopGameRequest, opts ...grpc.CallOption) (*StopGameReply, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (DukongGS_ChatClient, error)
}

type dukongGSClient struct {
	cc grpc.ClientConnInterface
}

func NewDukongGSClient(cc grpc.ClientConnInterface) DukongGSClient {
	return &dukongGSClient{cc}
}

func (c *dukongGSClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (DukongGS_LoginClient, error) {
	stream, err := c.cc.NewStream(ctx, &DukongGS_ServiceDesc.Streams[0], "/protocol.DukongGS/Login", opts...)
	if err != nil {
		return nil, err
	}
	x := &dukongGSLoginClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DukongGS_LoginClient interface {
	Recv() (*CommandMessage, error)
	grpc.ClientStream
}

type dukongGSLoginClient struct {
	grpc.ClientStream
}

func (x *dukongGSLoginClient) Recv() (*CommandMessage, error) {
	m := new(CommandMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dukongGSClient) StartGame(ctx context.Context, in *StartGameRequest, opts ...grpc.CallOption) (*StartGameReply, error) {
	out := new(StartGameReply)
	err := c.cc.Invoke(ctx, "/protocol.DukongGS/StartGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dukongGSClient) StopGame(ctx context.Context, in *StopGameRequest, opts ...grpc.CallOption) (*StopGameReply, error) {
	out := new(StopGameReply)
	err := c.cc.Invoke(ctx, "/protocol.DukongGS/StopGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dukongGSClient) Chat(ctx context.Context, opts ...grpc.CallOption) (DukongGS_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &DukongGS_ServiceDesc.Streams[1], "/protocol.DukongGS/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &dukongGSChatClient{stream}
	return x, nil
}

type DukongGS_ChatClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type dukongGSChatClient struct {
	grpc.ClientStream
}

func (x *dukongGSChatClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dukongGSChatClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DukongGSServer is the server API for DukongGS service.
// All implementations must embed UnimplementedDukongGSServer
// for forward compatibility
type DukongGSServer interface {
	// Sends a greeting
	Login(*LoginRequest, DukongGS_LoginServer) error
	StartGame(context.Context, *StartGameRequest) (*StartGameReply, error)
	StopGame(context.Context, *StopGameRequest) (*StopGameReply, error)
	Chat(DukongGS_ChatServer) error
	mustEmbedUnimplementedDukongGSServer()
}

// UnimplementedDukongGSServer must be embedded to have forward compatible implementations.
type UnimplementedDukongGSServer struct {
}

func (UnimplementedDukongGSServer) Login(*LoginRequest, DukongGS_LoginServer) error {
	return status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedDukongGSServer) StartGame(context.Context, *StartGameRequest) (*StartGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGame not implemented")
}
func (UnimplementedDukongGSServer) StopGame(context.Context, *StopGameRequest) (*StopGameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopGame not implemented")
}
func (UnimplementedDukongGSServer) Chat(DukongGS_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedDukongGSServer) mustEmbedUnimplementedDukongGSServer() {}

// UnsafeDukongGSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DukongGSServer will
// result in compilation errors.
type UnsafeDukongGSServer interface {
	mustEmbedUnimplementedDukongGSServer()
}

func RegisterDukongGSServer(s grpc.ServiceRegistrar, srv DukongGSServer) {
	s.RegisterService(&DukongGS_ServiceDesc, srv)
}

func _DukongGS_Login_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoginRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DukongGSServer).Login(m, &dukongGSLoginServer{stream})
}

type DukongGS_LoginServer interface {
	Send(*CommandMessage) error
	grpc.ServerStream
}

type dukongGSLoginServer struct {
	grpc.ServerStream
}

func (x *dukongGSLoginServer) Send(m *CommandMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _DukongGS_StartGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DukongGSServer).StartGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.DukongGS/StartGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DukongGSServer).StartGame(ctx, req.(*StartGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DukongGS_StopGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DukongGSServer).StopGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.DukongGS/StopGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DukongGSServer).StopGame(ctx, req.(*StopGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DukongGS_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DukongGSServer).Chat(&dukongGSChatServer{stream})
}

type DukongGS_ChatServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type dukongGSChatServer struct {
	grpc.ServerStream
}

func (x *dukongGSChatServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dukongGSChatServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DukongGS_ServiceDesc is the grpc.ServiceDesc for DukongGS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DukongGS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.DukongGS",
	HandlerType: (*DukongGSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGame",
			Handler:    _DukongGS_StartGame_Handler,
		},
		{
			MethodName: "StopGame",
			Handler:    _DukongGS_StopGame_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Login",
			Handler:       _DukongGS_Login_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _DukongGS_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protocol/command.proto",
}
